// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders correcly 1`] = `
"<!-- Generated by solve-dynamo-spec.js. Update this documentation by updating the spec-v1.json file. -->

# Solve API DynamoDB Spec  ![](https://img.shields.io/badge/version-undefined-orange.svg \\"Version undefined\\")

Documentation for the DynamoDB table

## Table of Contents

-   [Table Spec](#table-spec)
-   [Access Patterns](#access-patterns)
    -   [Get user profile info](#get-user-profile-info)
    -   [Get user available episodes](#get-user-available-episodes)
-   [Indexes](#indexes)
    -   [Main](#main)
-   [Author](#author)

## Table Spec

<details>

<summary>Params to create the table using the CLI or the AWS SDK:</summary>

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"AttributeDefinitions\\": [
    {
      \\"AttributeName\\": \\"pk\\",
      \\"AttributeType\\": \\"S\\"
    },
    {
      \\"AttributeName\\": \\"sk\\",
      \\"AttributeType\\": \\"S\\"
    }
  ],
  \\"KeySchema\\": [
    {
      \\"AttributeName\\": \\"pk\\",
      \\"KeyType\\": \\"HASH\\"
    },
    {
      \\"AttributeName\\": \\"sk\\",
      \\"KeyType\\": \\"RANGE\\"
    }
  ],
  \\"ProvisionedThroughput\\": {
    \\"ReadCapacityUnits\\": 5,
    \\"WriteCapacityUnits\\": 5
  },
  \\"BillingMode\\": \\"PAY_PER_REQUEST\\"
}
\`\`\`

</details>

\`createTable\` Using the CLI:

\`\`\`bash
$ aws dynamodb create-table --table-name solveless-api --cli-input-json create-table.json
\`\`\`

Using the AWS SDK:

\`\`\`javascript
const DynamoDB = require(\\"aws-sdk/clients/dynamodb\\");

const service = new DynamoDB({ region: process.env.AWS_REGION });

service.createTable(tableJson, (err, data) => {
  console.log(data);
});

\`\`\`

## Access Patterns

### Get user profile info

Perform a [DocumentClient.get](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#get-property \\"DocumentClient.get\\") against the Main index: 

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"Key\\": {
    \\"pk\\": \\"user-6549\\",
    \\"sk\\": \\"metadata:user-6549\\"
  }
}
\`\`\`

#### Matching Records

| pk (HASH) | sk (RANGE)         |                       |                  |                     |                                         |
| --------- | ------------------ | --------------------- | ---------------- | ------------------- | --------------------------------------- |
| user-6549 | metadata:user-6549 | **currentPoints:** 87 | **winCount:** 54 | **playedCount:** 65 | **profile:** \`{\\"avatar\\":\\"https://... }\` |

### Get user available episodes

Perform a [DocumentClient.query](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#query-property \\"DocumentClient.query\\") against the Main index with filter params:

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"KeyConditionExpression\\": \\"#pk = :pk\\",
  \\"ExpressionAttributeNames\\": {
    \\"#pk\\": \\"pk\\",
    \\"#releaseDate\\": \\"releaseDate\\",
    \\"#status\\": \\"status\\",
    \\"#title\\": \\"title\\"
  },
  \\"ExpressionAttributeValues\\": {
    \\":pk\\": \\"user-6549\\",
    \\":releaseDate\\": \\"01-12-2019\\",
    \\":status0\\": \\"READY\\",
    \\":status1\\": \\"PUBLISHED\\",
    \\":title\\": 3
  },
  \\"ScanIndexFoward\\": false,
  \\"FilterExpression\\": \\"#releaseDate <= :releaseDate AND #status IN (:status0, :status1) AND size(#title) >= :title\\"
}
\`\`\`

#### Matching Records

| pk (HASH) | sk (RANGE)    |                             |                   |                               |
| --------- | ------------- | --------------------------- | ----------------- | ----------------------------- |
| user-6549 | available:300 | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Family Problem |
| user-6549 | available:50  | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Mafia Problem  |

## Indexes

### Main

| pk (HASH) | sk (RANGE)         |                             |                   |                               |                                         |
| --------- | ------------------ | --------------------------- | ----------------- | ----------------------------- | --------------------------------------- |
| user-6549 | metadata:user-6549 | **currentPoints:** 87       | **winCount:** 54  | **playedCount:** 65           | **profile:** \`{\\"avatar\\":\\"https://... }\` |
| user-6549 | available:50       | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Mafia Problem  |                                         |
| user-6549 | available:300      | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Family Problem |                                         |

## Author

Spec authored by undefined and generated by [dynamodb-spec-generator](https://github.com/ericallam/dynamodb-spec-generator \\"DynamoDB Spec Generator\\")
"
`;

exports[`renders sparse indexes correcly 1`] = `
"<!-- Generated by solve-dynamo-spec.js. Update this documentation by updating the spec-v1.json file. -->

# Solve API DynamoDB Spec  ![](https://img.shields.io/badge/version-undefined-orange.svg \\"Version undefined\\")

Documentation for the DynamoDB table

## Table of Contents

-   [Table Spec](#table-spec)
-   [Access Patterns](#access-patterns)
    -   [Get user profile info](#get-user-profile-info)
    -   [Get user available episodes](#get-user-available-episodes)
-   [Indexes](#indexes)
    -   [Main](#main)
    -   [Gsi1](#gsi1)
-   [Author](#author)

## Table Spec

<details>

<summary>Params to create the table using the CLI or the AWS SDK:</summary>

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"AttributeDefinitions\\": [
    {
      \\"AttributeName\\": \\"pk\\",
      \\"AttributeType\\": \\"S\\"
    },
    {
      \\"AttributeName\\": \\"sk\\",
      \\"AttributeType\\": \\"S\\"
    }
  ],
  \\"KeySchema\\": [
    {
      \\"AttributeName\\": \\"pk\\",
      \\"KeyType\\": \\"HASH\\"
    },
    {
      \\"AttributeName\\": \\"sk\\",
      \\"KeyType\\": \\"RANGE\\"
    }
  ],
  \\"GlobalSecondaryIndexes\\": [
    {
      \\"IndexName\\": \\"gsi1\\",
      \\"KeySchema\\": [
        {
          \\"AttributeName\\": \\"status\\",
          \\"KeyType\\": \\"HASH\\"
        },
        {
          \\"AttributeName\\": \\"sk\\",
          \\"KeyType\\": \\"RANGE\\"
        }
      ]
    }
  ],
  \\"ProvisionedThroughput\\": {
    \\"ReadCapacityUnits\\": 5,
    \\"WriteCapacityUnits\\": 5
  },
  \\"BillingMode\\": \\"PAY_PER_REQUEST\\"
}
\`\`\`

</details>

\`createTable\` Using the CLI:

\`\`\`bash
$ aws dynamodb create-table --table-name solveless-api --cli-input-json create-table.json
\`\`\`

Using the AWS SDK:

\`\`\`javascript
const DynamoDB = require(\\"aws-sdk/clients/dynamodb\\");

const service = new DynamoDB({ region: process.env.AWS_REGION });

service.createTable(tableJson, (err, data) => {
  console.log(data);
});

\`\`\`

## Access Patterns

### Get user profile info

Perform a [DocumentClient.get](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#get-property \\"DocumentClient.get\\") against the Main index: 

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"Key\\": {
    \\"pk\\": \\"user-6549\\",
    \\"sk\\": \\"metadata:user-6549\\"
  }
}
\`\`\`

#### Matching Records

| pk (HASH) | sk (RANGE)         |                       |                  |                     |                                         |
| --------- | ------------------ | --------------------- | ---------------- | ------------------- | --------------------------------------- |
| user-6549 | metadata:user-6549 | **currentPoints:** 87 | **winCount:** 54 | **playedCount:** 65 | **profile:** \`{\\"avatar\\":\\"https://... }\` |

### Get user available episodes

Perform a [DocumentClient.query](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB/DocumentClient.html#query-property \\"DocumentClient.query\\") against the Main index with a \`#sk = :sk\` condition on the sort key with filter params:

\`\`\`json
{
  \\"TableName\\": \\"solveless-api\\",
  \\"KeyConditionExpression\\": \\"#pk = :pk and #sk = :sk\\",
  \\"ExpressionAttributeNames\\": {
    \\"#pk\\": \\"pk\\",
    \\"#sk\\": \\"sk\\",
    \\"#releaseDate\\": \\"releaseDate\\",
    \\"#status\\": \\"status\\",
    \\"#title\\": \\"title\\"
  },
  \\"ExpressionAttributeValues\\": {
    \\":pk\\": \\"user-6549\\",
    \\":sk\\": \\"episode:available\\",
    \\":releaseDate\\": \\"01-12-2019\\",
    \\":status0\\": \\"READY\\",
    \\":status1\\": \\"PUBLISHED\\",
    \\":title\\": 3
  },
  \\"FilterExpression\\": \\"#releaseDate <= :releaseDate AND #status IN (:status0, :status1) AND size(#title) >= :title\\",
  \\"Limit\\": 10
}
\`\`\`

#### Matching Records

| pk (HASH) | sk (RANGE)        |                             |                   |                              |
| --------- | ----------------- | --------------------------- | ----------------- | ---------------------------- |
| user-6549 | episode:available | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Mafia Problem |

## Indexes

### Main

| pk (HASH) | sk (RANGE)         |                             |                   |                              |                                         |
| --------- | ------------------ | --------------------------- | ----------------- | ---------------------------- | --------------------------------------- |
| user-6549 | metadata:user-6549 | **currentPoints:** 87       | **winCount:** 54  | **playedCount:** 65          | **profile:** \`{\\"avatar\\":\\"https://... }\` |
| user-6549 | episode:available  | **releaseDate:** 01-01-2019 | **status:** READY | **title:** The Mafia Problem |                                         |

### Gsi1

| status (HASH) | sk (RANGE)        |                   |                             |                              |
| ------------- | ----------------- | ----------------- | --------------------------- | ---------------------------- |
| READY         | episode:available | **pk:** user-6549 | **releaseDate:** 01-01-2019 | **title:** The Mafia Problem |

## Author

Spec authored by undefined and generated by [dynamodb-spec-generator](https://github.com/ericallam/dynamodb-spec-generator \\"DynamoDB Spec Generator\\")
"
`;
